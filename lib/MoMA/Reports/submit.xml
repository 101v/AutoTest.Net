<?xml version="1.0" encoding="utf-8"?>
<report version="1.0">
  <metadata>
    <definitions>Mono 2.4 (Revised)</definitions>
    <momaversion>2.0.0.0</momaversion>
    <date>2010-06-14 13:55:43Z</date>
    <name />
    <email />
    <homepage />
    <organization />
    <comments />
    <apptype />
  </metadata>
  <assemblies>
    <assembly name="AutoTest.Console.exe" version="0.0.0.81" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Castle.Core.dll" version="1.2.0.0" runtime="2.0" todo="2" niex="1" miss="0" pinv="0">
      <issue type="todo">
        <class>DiagnosticsLogger</class>
        <caller>void .ctor(string, string, string)</caller>
        <method>bool SourceExists(string, string)</method>
        <raw>System.Boolean System.Diagnostics.EventLog::SourceExists(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>DiagnosticsLogger</class>
        <caller>void .ctor(string, string, string)</caller>
        <method>void CreateEventSource(EventSourceCreationData)</method>
        <raw>System.Void System.Diagnostics.EventLog::CreateEventSource(System.Diagnostics.EventSourceCreationData)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="niex">
        <class>SlimReadWriteLock</class>
        <caller>void .ctor()</caller>
        <method>void .ctor(LockRecursionPolicy)</method>
        <raw>System.Void System.Threading.ReaderWriterLockSlim::.ctor(System.Threading.LockRecursionPolicy)</raw>
      </issue>
    </assembly>
    <assembly name="Castle.DynamicProxy2.dll" version="2.2.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Castle.Facilities.Logging.dll" version="2.1.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Castle.MicroKernel.dll" version="2.1.0.0" runtime="2.0" todo="1" niex="0" miss="0" pinv="0">
      <issue type="todo">
        <class>RemotingFacility</class>
        <caller>void SetUpRemotingConfiguration()</caller>
        <method>void Configure(string, bool)</method>
        <raw>System.Void System.Runtime.Remoting.RemotingConfiguration::Configure(System.String,System.Boolean)</raw>
        <data>Implement ensureSecurity</data>
      </issue>
    </assembly>
    <assembly name="Castle.Services.Logging.log4netIntegration.dll" version="1.2.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="Castle.Windsor.dll" version="2.1.0.0" runtime="2.0" todo="0" niex="0" miss="0" pinv="0" />
    <assembly name="log4net.dll" version="1.2.10.0" runtime="2.0" todo="6" niex="0" miss="0" pinv="17">
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>string LogNameFromSourceName(string, string)</method>
        <raw>System.String System.Diagnostics.EventLog::LogNameFromSourceName(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>void DeleteEventSource(string, string)</method>
        <raw>System.Void System.Diagnostics.EventLog::DeleteEventSource(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>string LogNameFromSourceName(string, string)</method>
        <raw>System.String System.Diagnostics.EventLog::LogNameFromSourceName(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>string LogNameFromSourceName(string, string)</method>
        <raw>System.String System.Diagnostics.EventLog::LogNameFromSourceName(System.String,System.String)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>EventLogAppender</class>
        <caller>void CreateEventSource(string, string, string)</caller>
        <method>void CreateEventSource(EventSourceCreationData)</method>
        <raw>System.Void System.Diagnostics.EventLog::CreateEventSource(System.Diagnostics.EventSourceCreationData)</raw>
        <data>remote machine is not supported</data>
      </issue>
      <issue type="todo">
        <class>XmlConfigurator</class>
        <caller>void Configure(ILoggerRepository, Uri)</caller>
        <method>ICredentials get_DefaultCredentials()</method>
        <raw>System.Net.ICredentials System.Net.CredentialCache::get_DefaultCredentials()</raw>
        <data>Need EnvironmentPermission implementation first</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>IntPtr GetStdHandle(uint)</method>
        <raw>System.IntPtr log4net.Appender.ColoredConsoleAppender::GetStdHandle(System.UInt32)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>IntPtr GetStdHandle(uint)</method>
        <raw>System.IntPtr log4net.Appender.ColoredConsoleAppender::GetStdHandle(System.UInt32)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>bool GetConsoleScreenBufferInfo(IntPtr, ColoredConsoleAppender/CONSOLE_SCREEN_BUFFER_INFO&amp;)</method>
        <raw>System.Boolean log4net.Appender.ColoredConsoleAppender::GetConsoleScreenBufferInfo(System.IntPtr,log4net.Appender.ColoredConsoleAppender/CONSOLE_SCREEN_BUFFER_INFO&amp;)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>bool SetConsoleTextAttribute(IntPtr, UInt16)</method>
        <raw>System.Boolean log4net.Appender.ColoredConsoleAppender::SetConsoleTextAttribute(System.IntPtr,System.UInt16)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>bool SetConsoleTextAttribute(IntPtr, UInt16)</method>
        <raw>System.Boolean log4net.Appender.ColoredConsoleAppender::SetConsoleTextAttribute(System.IntPtr,System.UInt16)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>ColoredConsoleAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>int GetConsoleOutputCP()</method>
        <raw>System.Int32 log4net.Appender.ColoredConsoleAppender::GetConsoleOutputCP()</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>LocalSyslogAppender</class>
        <caller>void ActivateOptions()</caller>
        <method>void openlog(IntPtr, int, LocalSyslogAppender/SyslogFacility)</method>
        <raw>System.Void log4net.Appender.LocalSyslogAppender::openlog(System.IntPtr,System.Int32,log4net.Appender.LocalSyslogAppender/SyslogFacility)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>LocalSyslogAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>void syslog(int, string, string)</method>
        <raw>System.Void log4net.Appender.LocalSyslogAppender::syslog(System.Int32,System.String,System.String)</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>LocalSyslogAppender</class>
        <caller>void OnClose()</caller>
        <method>void closelog()</method>
        <raw>System.Void log4net.Appender.LocalSyslogAppender::closelog()</raw>
        <data>libc</data>
      </issue>
      <issue type="pinv">
        <class>NetSendAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>int NetMessageBufferSend(string, string, string, string, int)</method>
        <raw>System.Int32 log4net.Appender.NetSendAppender::NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)</raw>
        <data>netapi32.dll</data>
      </issue>
      <issue type="pinv">
        <class>OutputDebugStringAppender</class>
        <caller>void Append(LoggingEvent)</caller>
        <method>void OutputDebugString(string)</method>
        <raw>System.Void log4net.Appender.OutputDebugStringAppender::OutputDebugString(System.String)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>NativeError</class>
        <caller>string GetErrorMessage(int)</caller>
        <method>int FormatMessage(int, IntPtr&amp;, int, int, String&amp;, int, IntPtr)</method>
        <raw>System.Int32 log4net.Util.NativeError::FormatMessage(System.Int32,System.IntPtr&amp;,System.Int32,System.Int32,System.String&amp;,System.Int32,System.IntPtr)</raw>
        <data>Kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool LogonUser(string, string, string, int, int, IntPtr&amp;)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr&amp;)</raw>
        <data>advapi32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool DuplicateToken(IntPtr, int, IntPtr&amp;)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::DuplicateToken(System.IntPtr,System.Int32,System.IntPtr&amp;)</raw>
        <data>advapi32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool CloseHandle(IntPtr)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::CloseHandle(System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool CloseHandle(IntPtr)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::CloseHandle(System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
      <issue type="pinv">
        <class>WindowsSecurityContext</class>
        <caller>WindowsIdentity LogonUser(string, string, string)</caller>
        <method>bool CloseHandle(IntPtr)</method>
        <raw>System.Boolean log4net.Util.WindowsSecurityContext::CloseHandle(System.IntPtr)</raw>
        <data>kernel32.dll</data>
      </issue>
    </assembly>
  </assemblies>
</report>